# Cookbook for building Coreboot from Scratch for a Qemu-aarch64-Environment
# For current commands and packages see https://doc.coreboot.org/tutorial/part1.html

1. Clone the coreboot repo
$ git clone https://review.coreboot.org/coreboot
2. Download Patch for Qemu-sbsa
$ git fetch https://review.coreboot.org/coreboot refs/changes/86/79086/3 && git checkout -b change-79086 FETCH_HEAD
3. Build the toolchain for aarch64
$ make crossgcc-aarch64 CPUS=$(nproc)
4. Generate the config
$ make menuconfig
	- select Mainboard->Mainboard Model->"QEMU sbsa"
	- safe config to .config
5. (Optionally) Test config
$ make savedefconfig
$ cat defconfig
	- check output, if changes match
6. Build coreboot (as a test without a payload)
$ make

Now you have built Coreboot from Scratch, but without a payload included. This is just a step to check if anything is okay

7. Create a RUN-Script for QEMU to try the coreboot
Requirements: TFA.fd (Firmware-Blob) in a blob/ subfolder
- Run the script run.sh provided with this document
Output in the last Line should be "[EMERG] Payload not loaded."
Exit with CTRL+A, X

8. Build your initramfs.cpio File with u-root
8.1 Build u-root
$ git clone https://github.com/u-root/u-root
$ cd u-root
$ go build
8.2 Build the initramfs
- Copy the build.sh provided for u-root and run it
If you experience errors with unreachable websites, get a go tarball and install it in your home directory, and use this bin, not the system-wide-installed version

9. Build the Linux Kernel for the u-boot Payload
- Download the kernel-tarball from kernel.org and extract it with tar -xvf
- Copy the provided file "linuxboot-defconfig" to yourkernelfolder/arch/arm64/configs/
- Change the Line "CONFIG_INITRAMFS_SOURCE" to match your u-root/initramfs.cpio File-Destination
- Build your .config File with:
$ ARCH=arm64 make linuxboot_defconfig
- Copy the Linux-Kernel build.sh provided to you to your Kernel's Destination and run it
For every question, just press Enter, until it starts building the Kernel

10. Build coreboot (again, but with payload this time)
- Apply another Patch to Coreboot, to add the uefistub we need:
$ git fetch https://review.coreboot.org/coreboot refs/changes/13/78913/4 && git cherry-pick FETCH_HEAD
- Copy the Linux-Kernel-Image located in yourkernelfolder/arch/arm64/boot/Image to yourcorebootfolder/payloads/uefistub/Image
- In the Coreboot Root-directory:
$ make menuconfig
	- Payloads->Uncheck "Don't add a payload"->Payload path and filename->payloads/uefistub/build/uefistub.elf
- copy payloads/uefistub/configs/defcontig-qemu-sbsa to payloads/uefistub/configs/defconfig
$ cd payloads/uefistub
$ make defconfig -j
$ cd ../..
$ make -j # build coreboot with payload

To test if everything is correct, run the run.sh script again, it should get you a u-root-shell
Exit with CTRL+A X

Boot from a .raw aarch64 disk-image
1. Get yourself a .raw disk-image (e.g. fedora/debian/...)
2. Uncomment the -drive Line in your run.sh file, and change the path to match your image
!The only tested image with this procedure is Fedora 36 Server Edition, others will work different!
3. Run run.sh and wait till you get the u-boot-shell
4. Check if the Image is there with:
$ ls /dev | grep sda
Output should be sda1,sda2,sda3
5. Mount Image
$ mkdir /mnt
$ mkdir /mnt/mount1
$ mount /dev/sda2 /mnt/mount1
$ cd /mnt/mount1
6. Copy boot parameters
$ cat loader/entries/yourfile.aarch64.conf
Copy the parameters after options (e.g. "root=/dev/mapper/fedora_fedora-root ro rd.lvm.lv=fedora_fedora/root rhgb quiet"

Tipp: Read 8. before 7. :)

7. Execute the Image
$ kexec -d -l vmlinuz-... -i initramfs-... -c "yourcopiedoptions"
$ kexec -e # Start the OS
After this it should boot into the os without any problems, but it should take plenty of time (~3min maybe)
(8.)
Untested, but nice to know: If you run an iso Image instead of a raw one, you can skip Step 7 and just type "boot" in the u-boot shell
